call bsf.import "javafx.scene.control.Alert",                  "fx.Alert"
call bsf.import "javafx.scene.control.Alert$AlertType",        "fx.Alert.Type"
 /*
  * note "AlertType" is public "inner" enum class, i.e. it is defined within the class "Alert", hence
  * the JavaDocs refer to "AlertType" as "Alert.AlertType": however the Java compiler produces the
  * class file as "Alert$AlertType"
  */

/* *************************************************************************************************** */
/* --------------------------------------------------------------------------------------------------- */
/* This routine will be called from the Rexx code defined with the "onAction" event attribute; cf.
 */
 
::routine saveFile public
    use arg slotDir

    if .my.app~alreadySavedFile <> .nil then
        skipDialog = .true                                  /* if a file was previously selected to open or save, use it
                                                               to save it the new content into that file, therefore skipping the
                                                               file selection dialog */
    else
        skipDialog = .false                                 -- default behaviour: do not skip the dialog

    call saveFileAs slotDir, skipDialog

/* --------------------------------------------------------------------------------------------------- */

::routine saveFileAs public
    use arg slotDir, skipDialog = .false    -- fetch the slotDir argument (BSF4ooRexx adds this as the last argument at the Java side)
                                            -- warning: only set skipDialog to 1 if .my.app~alreadySavedFile is set
    scriptContext = slotDir~scriptContext   -- get the slotDir (the last) argument, get the entry "SCRIPTCONTEXT"

    if scriptContext~getAttribute("showSourceCodeMenuItem")~getText == "Show HTML Editor" then do
        call toggleSourceCode slotDir
    end
    htmlEditor = scriptContext~getAttribute("htmlEditor")                 -- get a reference of the htmlEditor component
    htmlEditorText = htmlEditor~getHtmlText                               -- extract the html input

	parse var htmlEditorText pre 'contenteditable="true"' post			-- filter contenteditable out
	htmlEditorText = pre post											
	
    FileChooser = .bsf~new("javafx.stage.FileChooser")                  -- instantiate the javafx FileChooser class
    FileChooser~setTitle("Save file as")                                -- set the title for the FileChooser Dialog
    extensions = bsf.createJavaArrayOf("java.lang.String", "*.html", "*.htm", "*.php")
    filter = .bsf~new("javafx.stage.FileChooser$ExtensionFilter", "html files", extensions)
    FileChooser~getExtensionFilters~add(filter)                         /* only allow files to be uploaded which have
                                                                          the extensions defined in the ExtensionFilter */

    if .my.app~alreadySavedFile <> .nil then do
     FileChooser~setInitialDirectory(.my.app~alreadySavedFile~getParentFile)    -- predefine the directory
     FileChooser~setInitialFileName(.my.app~alreadySavedFile~toString)          -- predefine the filename
    end

    if skipDialog = .false then
        file = FileChooser~showSaveDialog(.my.app~primaryStage)             -- show the save dialog
    else
        file = .bsf~new("java.io.File", .my.app~alreadySavedFile~toString)

    if file \= .nil then do

        filename = file~toString
        rexxStream = .stream~new(filename)                                -- create an instance of rexx' stream class
        rexxStream~open("both replace")                                   /* replace the first line with the content
                                                                             instead of adding another */

        rexxStream~lineOut(htmlEditorText)                                -- write the html content into that file
        rexxStream~close                                                  -- release the lock on this file
        alert = .fx.alert~new(.fx.Alert.Type~information)   -- create an error alert
        alert~setTitle("success")
        alert~setHeaderText(.nil)
        alert~setContentText("File successfully saved!")
        alert~showAndWait

      .my.app~alreadySavedFile = file                                     -- save the file to eventually skip the dialog
    end

/* --------------------------------------------------------------------------------------------------- */


::routine loadFile public
    use arg slotDir
    scriptContext = slotDir~scriptContext

    if scriptContext~getAttribute("showSourceCodeMenuItem")~getText == "Show HTML Editor" then do
        call toggleSourceCode slotDir
    end
    /*@get (htmlEditor)*/
    FileChooser = .bsf~new("javafx.stage.FileChooser")                  -- instantiate the javafx FileChooser class
    FileChooser~setTitle("Load file")                                -- set the title for the FileChooser Dialog
    extensions = bsf.createJavaArrayOf("java.lang.String", "*.html", "*.htm", "*.php")
    filter = .bsf~new("javafx.stage.FileChooser$ExtensionFilter", "html files", extensions)
    FileChooser~getExtensionFilters~add(filter)                         /* only allow files to be uploaded which have
                                                                                  the extensions defined in the ExtensionFilter */
    if .my.app~alreadySavedFile <> .nil then do
       FileChooser~setInitialDirectory(.my.app~alreadySavedFile~getParentFile)
    end
    file = FileChooser~showOpenDialog(.my.app~primaryStage)             -- show the dialog to load a file

    if file <> .nil then do
        rexxStream = .stream~new(file~toString)
		htmlEditor~setHtmlText("")                                      -- delete all the content of the html editor
		do i = 1 to rexxStream~lines
			nextLine = rexxStream~lineIn
			if abbrev(nextLine, "<body") & \abbrev(nextLine, 'contenteditable="true"') then
				nextLine = STRREPLACE(nextLine, "<body", '<body contenteditable="true"')
			htmlEditor~setHtmlText(htmlEditor~getHtmlText || nextLine) /* append the content of the file to our
                                                                                   html editor */
																		   
		end
        rexxStream~close
        .my.app~alreadySavedFile = file
        say "File successfully opened!"
    end

/* --------------------------------------------------------------------------------------------------- */

::routine closeProgram public
   .my.app~rexxHandler~stop

/* --------------------------------------------------------------------------------------------------- */

::routine changeTheme public
    use arg themeName
    if themeName = 'Modena' then
        theme = .my.app~rxApp~STYLESHEET_MODENA              -- "Modena" is the default theme shipped with JavaFX 8
    else if themeName = 'Caspian' then
        theme = .my.app~rxApp~STYLESHEET_CASPIAN             /* although it is possible to switch to the old JavaFX 2
                                                                stylesheet named "Caspian" */
    .my.app~rxApp~setUserAgentStylesheet(theme)


/* --------------------------------------------------------------------------------------------------- */

::routine toggleSourceCode public
    use arg slotDir
    scriptContext = slotDir~scriptContext

    /*@get (htmlEditor textArea showSourceCodeMenuItem)*/
    if showSourceCodeMenuItem~getText = "Show source code" then do   -- default value
        textArea~setText(htmlEditor~getHtmlText)                     -- set the text in the text area
        textArea~setVisible(.true)                                   -- display the textarea overlapping the html editor
        showSourceCodeMenuItem~setText("Show HTML Editor")           -- change the text of the menu item
    end
    else do
        htmlEditor~setHtmlText(textArea~getText)                     -- adopt the changes
        textArea~setVisible(.false)                                  -- hide the textarea element
        showSourceCodeMenuItem~setText("Show source code")
    end
	
	
/* http://code.xmlgadgets.com/2010/07/25/rexx-strreplace-replace-part-of-a-string-with-new-string/ 2017-03-20 */
/* A FUNCTION TO DO A STRING REPLACE */
::routine STRREPLACE
  ORIGINAL = ARG(1)
  OLDTXT = ARG(2)
  NEWTXT = ARG(3)
/* YOU CAN CHANGE THE BELOW KEY (TMPTXT), WHICH IS USED AS A TEMPORARY
POINTER TO IDENTIFY THE TEXT TO BE REPLACED */
  TMPTXT = '6A53CD2EW1F'
  NEWSTR = ORIGINAL
  DO WHILE POS(OLDTXT,NEWSTR) > 0
    NEWSTR = SUBSTR(NEWSTR, 1 , POS(OLDTXT,NEWSTR)-1) ||,
    TMPTXT || SUBSTR(NEWSTR, POS(OLDTXT,NEWSTR) + LENGTH(OLDTXT))
  END
  DO WHILE POS(TMPTXT,NEWSTR) > 0
    NEWSTR = SUBSTR(NEWSTR, 1 , POS(TMPTXT,NEWSTR)-1) ||,
    NEWTXT || SUBSTR(NEWSTR, POS(TMPTXT,NEWSTR) + LENGTH(TMPTXT))
  END
  RETURN NEWSTR