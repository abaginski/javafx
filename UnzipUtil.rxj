zipFilePath = "http://www.colorado.edu/conflict/peace/download/peace.zip"
destDirectory = "unzip/"
.UnzipUtility~new~unzip(zipFilePath, destDirectory)


/**
 * This utility extracts files and directories of a standard zip file to
 * a destination directory.
 * @author www.codejava.net
 *
 */
::class UnzipUtility

/**
 * Extracts a zip file specified by the zipFilePath to a directory specified by
 * destDirectory (will be created if does not exists)
 * @param zipFilePath
 * @param destDirectory
 */
::method unzip
  expose GuiUpdater
  use arg zipFilePath, destDirectory
  destDir = .bsf~new("java.io.File", destDirectory)
  if \destDir~exists then
    destDir~mkdir
  url = .bsf~new("java.net.URL", zipFilePath)
  urlConnection = url~openConnection
  inputStream = urlConnection~getInputStream
  zipIn = .bsf~new("java.util.zip.ZipInputStream", inputStream)
  entry = zipIn~getNextEntry
  loop while entry <> .nil
    filename = entry~getName
    filePath = destDirectory || "/" || filename
    say "Extracting" filename
    if \entry~isDirectory then
      self~extractFile(zipIn, filePath)       -- it is a file, extract it
    else
      .bsf~new("java.io.File", filePath)~mkdir
    zipIn~closeEntry
    entry = zipIn~getNextEntry
  end

/**
 * Extracts a zip entry (file entry)
 * @param zipIn
 * @param filePath
 */
::method extractFile
  use arg zipIn, filePath
  bos = .bsf~new("java.io.BufferedOutputStream", .bsf~new("java.io.FileOutputStream", filePath))
  bytesIn = bsf.createJavaArray("byte.class", 1024)
  read = zipIn~read(bytesIn)
  loop while read <> -1
    bos~write(bytesIn, 0, read)
    read = zipIn~read(bytesIn)
  end
  bos~close

::requires bsf.cls