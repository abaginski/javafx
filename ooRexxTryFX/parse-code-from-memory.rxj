call bsf.import "org.oorexx.ide.standalone.OoRexxStandaloneParser", "ooRexxParser"
code = "trace i" || .endOfLine || -
"do i=1 to 10 by 2" || .endOfLine || -
"test(i)" || .endOfLine || -
"end" || .endOfLine || -
"::routine test".endOfLine-
"say arg(1)"
if SysIsFile(arg(1)) then do
  fileStream = .stream~new(arg(1)) ~~open("read shared") ~arrayIn
  code = fileStream~makeString("l")
end
say pp(code)
FileElement = .ooRexxParser~parse(code)
.local~tree = Fileelement~getLighterAST
call walkTheAST 0, .tree~getRoot               -- start walking the tree with the root node
exit

::routine walkTheAST
  use arg level, node
  loop child over .tree~getChildren(node)
    grandchildren = .tree~getChildren(child)
    /* information gathering */
    type = child~getTokenType~toString
    start = child~getStartOffset
    end = child~getEndOffset
    length = end - start
    /* output and recursive walk */
    say " "~copies(level) || type || ":" start "-" end
    if grandchildren~size > 0 then
      call walkTheAST level+1, child
    else
      say "~"~copies(40)       -- the statement in that iteration is a leaf
  end


::requires "BSF.CLS"