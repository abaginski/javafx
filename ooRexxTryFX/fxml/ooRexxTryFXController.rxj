/* redirect output monitor destination */
.local~rexxEngine = .bsf~new("org.apache.bsf.BSFManager")~loadScriptingEngine("rexx")
.output~destination(.GUIOutputStream~new("STDOUT"))

::class GUIOutputStream subclass stream
::method say
    use arg output
    .my.app~ooRexxTryFX.fxml~Output~setText( output )

::routine runApp public
    use arg slotDir

  --  signal on syntax
    ScriptContext = slotDir~scriptContext
    TextArea = .TabManager~getInputArea
    Code = TextArea~getText

    runnable = BsfCreateRexxProxy(.ExecuteThread~new(Code), ,.java.lang.Runnable)
    .java.lang.Thread~new(runnable)~~bsf.dispatch("start")              -- Run code in separate thread
    /*@get(SplitPane)*/
    /* grow the Output Area: */
    SplitPane~setDividerPosition(0, 0.65)   -- arguments: index, position

/* --------------------------------------------------------------------------------------------------- */

::class ExecuteThread
::method init
   expose Code
   use arg Code

::method run
   expose Code
   .rexxEngine~apply("tmp.code",0,0,Code,.nil,.nil) --java.lang.String source, int lineNo, int columnNo, java.lang.Object funcBody, java.util.Vector paramNames, java.util.Vector arguments)
   say pp(result)



/* --------------------------------------------------------------------------------------------------- */

::routine saveFile public
    use arg slotDir

    if .TabManager~alreadySavedFile <> .nil then
        skipDialog = .true                                  /* if a file was previously selected to open or save, use it
                                                               to save it the new content into that file, therefore skipping the
                                                               file selection dialog */
    else
        skipDialog = .false                                 -- default behaviour: do not skip the dialog

   call saveFileAs slotDir, skipDialog

/* --------------------------------------------------------------------------------------------------- */

::routine saveFileAs public
    use arg slotDir, skipDialog = .false    -- fetch the slotDir argument (BSF4ooRexx adds this as the last argument at the Java side)
    scriptContext = slotDir~scriptContext   -- get the slotDir (the last) argument, get the entry "SCRIPTCONTEXT"

    Code = .TabManager~getInputArea~getText

    FileChooser = .bsf~new("javafx.stage.FileChooser")                  -- instantiate the javafx FileChooser class
    FileChooser~setTitle("Save file as")                                -- set the title for the FileChooser Dialog
    extensions = bsf.createJavaArrayOf("java.lang.String", "*.*")
    filter = .bsf~new("javafx.stage.FileChooser$ExtensionFilter", "all files", extensions)
    FileChooser~getExtensionFilters~add(filter)

    alreadySavedFile = .TabManager~alreadySavedFile

    if alreadySavedFile <> .nil then do
      fileObj = .bsf~new("java.io.File", alreadySavedFile)
      FileChooser~setInitialDirectory( fileObj~getParentFile )    -- predefine the directory
      FileChooser~setInitialFileName( fileObj~toString )          -- predefine the filename
    end
    else do
      /* set the current directory as default */
      FileChooser~setInitialDirectory( .bsf~new("java.io.File", Directory()) )                     -- set to this directory
    end
    if \skipDialog then
        file = FileChooser~showSaveDialog(.my.app~primaryStage)             -- show the save dialog
    else
        file = .bsf~new("java.io.File", alreadySavedFile)

    if file \= .nil then do

        filepath = file~toString
        rexxStream = .stream~new(filepath)                                -- create an instance of rexx' stream class
        rexxStream~open("both replace")                                   /* replace the first line with the content
                                                                             instead of adding another */
        do line over Code
          rexxStream~lineOut(line) /*todo: remove the last line */                                         -- write the Code into that file
        end
        rexxStream~close                                                  -- release the lock on this file

        /*todo: notification instead of alerts
        alert = .fx.alert~new(.fx.Alert.Type~information)   -- create an error alert
        alert~setTitle("success")
        alert~setHeaderText(.nil)
        alert~setContentText("File successfully saved!")
        alert~showAndWait
        */
        .TabManager~saveFilepath(filepath)                                     -- save the file to eventually skip the dialog next time
        filename = filespec("Name", filepath)
        .TabManager~getCurrentTab~setText(filename)
        .OpenRecentMenuManager~updateMenu(filepath)
        say time()": File successfully saved!"      --todo: no output??
        .my.app~ooRexxTryFX.fxml~SplitPane~setDividerPosition(0, 0.75)   -- arguments: index, position
    end

/* --------------------------------------------------------------------------------------------------- */

::routine loadFile public
    use arg slotDir
    scriptContext = slotDir~scriptContext
    TextArea = .TabManager~getInputArea
    Code = TextArea~getText

    if slotDir~userData <> .nil then do
      userData = slotDir~userData
      if userData~useCurrentFile <> .nil then do                       -- called by "Application" -> "Reload"
        savedFilepath = .TabManager~alreadySavedFile
        if savedFilepath = .nil then do
          say time()": Reloading not possible"
          return                                 -- leave the method, reloading not possible
        end
        file = .bsf~new("java.io.File", savedFilepath)
      end
      else if userData~useSpecificFile <> .nil then do
        filepath = userData~useSpecificFile
        file = .bsf~new("java.io.File", filepath)
      end
    end
    else do                                                               -- need to open a filechooser dialog
      FileChooser = .bsf~new("javafx.stage.FileChooser")                  -- instantiate the javafx FileChooser class
      FileChooser~setTitle("Load file")                                   -- set the title for the FileChooser Dialog

      if .TabManager~alreadySavedFile <> .nil then do
        fileObj = .bsf~new("java.io.File", .TabManager~alreadySavedFile)
        initialDirectory = fileObj~getParentFile                          -- get a reference to the parent directory
      end
      else
        initialDirectory = .bsf~new("java.io.File", Directory())

      FileChooser~setInitialDirectory(initialDirectory)
      file = FileChooser~showOpenDialog(.my.app~primaryStage)             -- show the dialog to load a file
    end
    /* TODO:
    if .TabManager~getCurrentTab~getText~equals("Untitled Document") then
      --> open in this tab
      else: open in new tab
      */
    if file \= .nil then do
        filepath = file~toString                                            -- cast the "File" obj to a "String", thereby extracting the filepath
        rexxStream = .stream~new(filepath)
        loadedCode = ""
		    do line over rexxStream
			     loadedCode ||= line "0a"x                                  /* append the next line to the string loadedCode */
        end
        TextArea~setText(loadedCode)
        rexxStream~close
        say time() || ": File successfully opened!"
        --todo: make this a statusbar notification
        .TabManager~saveFilepath(filepath)
        .TabManager~getCurrentTab~setText( filespec("name", filepath) )
        .OpenRecentMenuManager~updateMenu(filepath)
    end

/* --------------------------------------------------------------------------------------------------- */