/* redirect output monitor destination */
-- .local~fx.rexxEngine = .bsf~new("org.apache.bsf.BSFManager")~loadScriptingEngine("rexx")
-- .output~destination(.GUIOutputStream~new("STDOUT")) -- we need to change the new Rexx engine's .output !

::requires "ooRexx/FXRexxEngine.rxj"    -- get access to the RXRexxEngine class


::routine runApp public
    use arg slotDir
    .StatusBarManager~setMessage("Running ...", "LOADING")
    timeStart = .dateTime~new
    tgtOutput=.my.app~ooRexxTryFX.fxml~Output   -- get "Output" TextArea object
    tgtOutput~replaceText("")  -- delete content of output area
    tgtInput=.my.app~ooRexxTryFX.fxml~Input
    tgtInput~setText("")

-- rgf: hier k?nnte in Zukunft entschieden werden, welche RexxEngine zur Ausf?hrung benutzt werden soll
    fxRexxEngine = .FXRexxEngine~latestFXRexxEngine   -- if a RexxEngine is available it can be retrieved
    if fxRexxEngine = .nil then      -- no RexxEngine created so far, create one
    do
         -- usage                  (input,output,error,debugInput,traceOutput)
       fxRexxEngine = .FXRexxEngine~new(tgtInput, tgtOutput, tgtOutput, tgtInput, tgtOutput)
       .local~fx.RexxEngine = fxRexxEngine     -- diese soll die Default-RexxEngine sein (.fx.RexxEngine)
    end

  --  signal on syntax
    scriptContext = slotDir~scriptContext
    CodeArea = .TabManager~getInputArea
    Code = CodeArea~getText

-- rgf: why executing on a separate thread?
    et = .ExecuteThread~new(fxRexxEngine~rexxEngine, Code)
    .local~et = et
    runnable = bsfCreateRexxProxy(et,,.java.lang.Runnable)
    .java.lang.Thread~new(runnable) ~~bsf.dispatch("start")              -- Run code in separate thread
    say "Rexx program started," .dateTime~new", et~busy="pp(et~busy) "et~done="pp(et~done)
    say "Rexx program may have ended already," .dateTime~new", et~busy="pp(et~busy) "et~done="pp(et~done)
    say "---"
  --guard on when et~done
  redo:
  if et~done then
    .StatusBarManager~setTempMessage("Execution time" timeStart~elapsed)
  else if et~error then do
    options = .stringTable~new
    options~time = 15
    options~type = "ERROR"
    .StatusBarManager~setTempMessage("Error occured", options)
  end
  do
    say "gotta wait [Controller:45]"
    call sysSleep .3
    call redo
  end
  return


/* --------------------------------------------------------------------------------------------------- */


-- rgf: jetzt ein drittes
::class ExecuteThread
::attribute res               -- attribute will receive the return value from the Rexx program; fetch it after "done" got .true
::attribute busy              -- indicates whether Rexx program is executing on separate thread
::attribute done              -- indicate that Rexx script ran
::attribute error
::method init
   expose rexxEngine Code args busy done
   use strict arg rexxEngine, Code, args=.nil
   res=.nil                   -- set res attribute explicitly to .nil
   done=.false                -- indicate that Rexx program was not run/is not finished
   busy=.false                -- indicate Rexx program not running (yet)

::method run
   expose rexxEngine Code args res busy done
   busy=.true                 -- indicate Rexx program is running
   signal on syntax
   res=rexxEngine~apply("code",0,0,Code,.nil,args) --java.lang.String source, int lineNo, int columnNo, java.lang.Object funcBody, java.util.Vector paramNames, java.util.Vector arguments)
   say pp("busy" busy) pp("done" done)
   busy=.false                -- indicate Rexx program is not running anymore
   done=.true                 -- indicate that Rexx program has run and is finished, save to fetch result "res"
   say self", method" pp(.context~name)", received Rexx result:" pp(res)
   return


syntax:
   co = condition("object")
   errorMsg = ppCondition2(co)
   .et~error=.true
   .Platform~runLater(bsfCreateRexxProxy(.errorPrinter~new(errorMsg),,.java.lang.Runnable))
   exit -1


::class errorPrinter
::method init
  expose errorMsg
  use arg errorMsg

::method run
  expose errorMsg
  fxTextArea = .my.app~ooRexxTryFX.fxml~Output
  from = fxTextArea~getLength
  fxTextArea~appendText(errorMsg)
  say fxTextArea~getLength
  to = min(from + errorMsg~length, fxTextArea~getLength)
  fxTextArea~setStyle(from, to, .styles["ERROR"])

/* --------------------------------------------------------------------------------------------------- */

::routine saveFile public
    use arg slotDir

    if .TabManager~alreadySavedFile <> .nil then
        skipDialog = .true                                  /* if a file was previously selected to open or save, use it
                                                               to save it the new content into that file, therefore skipping the
                                                               file selection dialog */
    else
        skipDialog = .false                                 -- default behaviour: do not skip the dialog

   call saveFileAs slotDir, skipDialog

/* --------------------------------------------------------------------------------------------------- */

::routine saveFileAs public
  use arg slotDir, skipDialog = .false    -- fetch the slotDir argument (BSF4ooRexx adds this as the last argument at the Java side)
  scriptContext = slotDir~scriptContext   -- get the slotDir (the last) argument, get the entry "SCRIPTCONTEXT"

  Code = .TabManager~getInputArea~getText
  alreadySavedFile = .TabManager~alreadySavedFile

  if \skipDialog then
    file = .FileManager~saveDialog(alreadySavedFile)             -- show the save dialog
  else
    file = .bsf~new("java.io.File", alreadySavedFile)

  if file \= .nil then do
    filepath = file~toString
    .FileManager~saveFile(filepath, Code)
    .TabManager~saveFilepath(filepath)                                     -- save the file to eventually skip the dialog next time
    .OpenRecentMenuManager~updateMenu(filepath)
    .StatusBarManager~setTempMessage(filepath "successfully saved!")
  end

/* --------------------------------------------------------------------------------------------------- */

::routine loadFile public
    use arg slotDir
    scriptContext = slotDir~scriptContext
    if slotDir~userData <> .nil then do
      userData = slotDir~userData
      if userData~useCurrentFile <> .nil then do                       -- called by "Application" -> "Reload"
        savedFilepath = .TabManager~alreadySavedFile
        if savedFilepath = .nil then do
          .StatusBarManager~setMessage("Reloading not possible", "ERROR")
          return                                 -- leave the method, reloading not possible
        end
        file = .bsf~new("java.io.File", savedFilepath)
      end
      else if userData~useSpecificFile <> .nil then do
        filepath = userData~useSpecificFile
        file = .bsf~new("java.io.File", filepath)
      end
    end
    else                                                               -- need to open a filechooser dialog
      file = .FileManager~openDialog(.TabManager~alreadySavedFile)

    if file \= .nil then do
        Tab = .TabManager~newTab                                                  -- always open the file in a new tab
        filepath = file~toString                                            -- cast the "File" obj to a "String", thereby extracting the filepath
        loadedCode = .FileManager~openFile(filepath)
        .TabManager~getInputArea~replaceText(loadedCode)
        Tab~setGraphic(.nil)                  -- remove the save Icon from the Tab, because there is no new content
        .TabManager~saveFilepath(filepath)
        tooltip = .bsf~new("javafx.scene.control.Tooltip", filepath)
        .TabManager~getCurrentTab~~setText( filespec("name", filepath) ) ~~setTooltip(tooltip)     -- set a tooltip and text to the tab
        .OpenRecentMenuManager~updateMenu(filepath)
        options = .stringTable~new
        options~type = "SUCCESS"
        .StatusBarManager~setTempMessage(filepath " successfully opened!", options)
    end

/* --------------------------------------------------------------------------------------------------- */

/* --------------------------------------------------------------------------------------------------- */
::routine closeAllTabs public
  loop i=1 to .TabManager~allTabs~size
    .TabManager~closeTab
  end

/** this routine will save all tabs which have a known filepath, so they were opened or saved before */
::routine saveAll public
  use arg slotDir
  allTabs = .TabManager~allTabs
  alreadySavedFilepaths = .TabManager~alreadySavedFilepaths
  saveCounter = 0
  loop with index idx item tab over allTabs
    filepath = alreadySavedFilepaths~at(idx)
    if filepath <> .nil then do
      .FileManager~saveFile(filepath, tab~content~content~getText)
      tab~setGraphic(.nil)
      saveCounter += 1
    end
  end
  .StatusBarManager~setMessage(saveCounter "files were saved", "SUCCESS")



::routine zoom public
  use arg mode
  select case mode
    when in then
      .my.app~codeAreaFontSize += 1
    when out then
      .my.app~codeAreaFontSize -= 1
  end
  .my.app~preferences~~setProperty("codeAreaFontSize", .my.app~codeAreaFontSize)~~save(.prefPath)
  /* this font size will apply for all new opened files but not for the already opened ones, hence we need to update them too */
  loop Tab over .TabManager~allTabs
   codeArea = .TabManager~getInputArea(Tab)
   codeArea~setStyle("-fx-font-size:" .my.app~codeAreaFontSize || "pt")
  end


/* this routine will walk the filetree using a recursive loop and the private routine down below and save all expanded directories in the preferences, then close the application */
::routine closeApp public
  .FileTreeManager~savePaths
  say "shutdown"
  .Platform~exit

::requires "rgf_util2.rex"