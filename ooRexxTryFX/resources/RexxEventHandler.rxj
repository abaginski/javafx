call bsf.import "javafx.scene.input.KeyCode", "keyCode"
/* this class is supposed to handle all events in this app */
::class RexxEventHandler public
::method init
  expose currentFontSize

::method handle                     /* the handle method is called by javafx.event.eventHandler */
  expose currentFontSize
  use arg event, slotDir
  caller = event~getSource
  eventName = event~eventType~getName
  select case eventName
    when "TAB_CLOSE_REQUEST_EVENT" then do
      /* this event is caused by a user clicking on the X of a tab */
      .TabManager~closeTab          -- invoke the closeTab method manually
      event~consume                 -- consume the event to prevent default behavor of this event
    end
    when "KEY_PRESSED" then do
      condition1 = event~getCode~equals(.keyCode~ENTER)             -- currently, we are only interested in clicks on the return key
      currentItem = .my.app~ooRexxTryFX.fxml~FileTree~getSelectionModel~getSelectedItem
      condition2 = currentItem~isLeaf     -- a leaf is a tree item with no children, e.g. a file
      if condition1 & condition2 then do
        filepath = .FileTreeManager~getFullPath(currentItem)
        .openFile~new(filepath)~~handle
      end
    end
    when "MOUSE_CLICKED" then do -- fired by the file tree
      signal on syntax                                             -- intercept all errors
      fileTree = .my.app~ooRexxTryFX.fxml~FileTree
      condition1 = caller~equals(FileTree)   -- check if the click occured on the filetree (or on the rest of the container)
      condition2 = (event~getClickCount = 2)          -- we are only interested in double clicks
      currentItem = fileTree~getSelectionModel~getSelectedItem
      condition3 = currentItem~isLeaf     -- a leaf is a tree item with no children, e.g. a file
      if condition1 & condition2 & condition3 then do
        filepath = .FileTreeManager~getFullPath(currentItem)
        .openFile~new(filepath)~~handle
      end
      syntax: return                                               -- do not output any error messages
    end
    when "BranchExpandedEvent" then do
      signal off syntax
      /* this event gets fired when the user clicks expands a directory in the tree view */
      .FileTreeManager~updateTree(caller)
    end
    when "SCROLL" then do
      /* the following handler zooms the current codeArea based on the scroll amount of the user */
      if event~isShortcutDown then do               -- only do something if control is pressed
        if event~deltaY > 0 then                   -- e.g. scroll up
          call zoom in                                -- let the controller handle the zooming
        else                                       -- e.g. scroll down
          call zoom out
      end
    end
    otherwise
      say "[information] uncaught event {"eventName"}"
  end

::method unknown
  say "[information] uncaught call {"arg(1)"}"

::requires "BSF.CLS"
::requires "resources/OpenRecentMenuManager.rxj"
::requires "fxml/ooRexxTryFXController.rxj"